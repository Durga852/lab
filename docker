sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
				  
sudo yum install -y yum-utils
sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

sudo yum install docker-ce docker-ce-cli containerd.io -y	

sudo systemctl start docker
sudo systemctl enable docker
sudo docker run hello-world

docker info

============================

docker ps --> to list active process
docker ps -a --> list all the process
docker ps -l --> to list last
docker ps -q --> list Cid which is active
docker ps -aq --> list Cid all
docker run -it centos ---> -it will take inside the Container

docker run -it centos --> to keep active connection Ctrl p + q

docker exec -it <Cid> /bin/bash --> to go inside a container again

docker stop <Cid> --> stop the container

docker run -itd centos -> dont login inside container and run in background

docker run -itd --name=centos1 centos --> create Cid name

docker ps --> check the Cid name 

docker stats <CID> --> to check cpu usage
docker top <CID> --> to check process inside container 
docker kill <CID> --> will kill the container fource
docker system prune --> will help to clean up the stopped container on docker ps -a
docker logs vm6 --> help to check the logs
docker stop vm6 vm5 vm4 vm3 --> stop multipal containers

https://hub.docker.com/ --> Docker images link
docker images --> to list all the images
docker pull ubuntu:19.10
docker pull centos:centos7
docker images
docker run -itd --name=ub1 ubuntu:19.10
docker ps
docker run -itd --name=c1 centos:centos7
docker ps
docker images

docker tag ubuntu:19.10 prod:older --> tag the images by your own name
docker tag centos:centos7 dev:older 
docker run -itd --name=c1 prod:older

trying to remove the images and containers

make sure your stopped all the CID's

docker rm <CID> --> to remove the container
docker rmi <ImgId> --> to remove the images

docker rmi -f <ID> --> to remove fource

docker system df --> to check disk free 
docker inspect --> to get the informations in-details
/var/lib/docker --> default path of docker


============================

docker pull httpd --> pull an apache image from docker hub
docker images --> check image is avaliable
docker run -itd --name=app1 httpd ---> run a container and check the tcp port
docker ps --> default port should show as tcp:80 where application port is 
docker run -itd --name=app2 -P httpd 
docker ps --> check the port number which is automaticaly mapped 

netstat -ntpl --> check and verify in phycial server port as been mapped to docker proxy

try to access the port from web browser with the port numberusing phycial server IP ex: 192.168.56.115:32768

docker stop app1 --> stop the container and check application will go down

docker start app1 --> to to access again from brower

docker ps --> here it will automaticall map to new port since we user -P at the docker run time

docker run -itd --name=app2 -p 8080:80 httpd --> start container using small "p" where it always map the port to 8080

docker ps --> check the status of the port and it should be always 8080 

try to access the port from web browser with the port number 8080 using phycial server IP ex: 192.168.56.115:8080

docker stop app2 --> stop the container and check application will go down
docker start app2 --> to access again from brower using same port number 8080


========= creating custom image ========

docker run -itd --rm --name=c1 centos --> run the container using --rm and use main core image 
docker exec -it c1 /bin/bash --> going inside a container to edit as per need and installaction
mkdir chethan --> your inside
yum install httpd -y
cd /var/www/html/
cat > index.html
<h1> Welcome to C1 host </h1> 
press Ctrl C 

docker commit c1 cenosimg:v1 ----> creating a custom image name from c1
docker images --> check the images
docker stop c1 --> stop container
docker ps -a --> check the process
docker run -itd --rm --name=c1 cenosimg:v1 ---> start back from your custom image name
docker ps -a
docker exec -it c1 /bin/bash --> check all the files are avaliable as we created 

docker run -itd --name=web1 -p 80:80 cenosimg:v1 sh -c "/usr/sbin/httpd -D FOREGROUND" ---> run container using costom image and map port

========= ========= docker push =============
docker images --> check docker images custom image is there now

docker login --> login using your docker hub ID
docker tag cenosimg:v1  bschethan99/cenosimg:v1 --> tag your custom image as per your docker account ID
docker images --> verify the tagged image
docker push bschethan99/cenosimg:v1 ---> try to push the image to your own repository 
login to hub.docker.com  and verify the image is avaliable on your account

clean up all the images and containers and try to pull from your own repo 

docker run -itd --rm --name=web1 -p 80:80 bschethan99/cenosimg:v1  sh -c "/usr/sbin/httpd -D FOREGROUND" --> rerun the docker from your own repo

check in browser application works fine with port 80


============= Docker File ===========
[root@master ~]# cat > index.html                     ------> create a index file from local phycial server to copy
<h1> welcome to DockerFile </h1> 

[root@master ~]# cat > Dockerfile                    ------> creating a DockerFile 
FROM centos
RUN yum install httpd -y && yum install vim -y
COPY index.html /var/www/html/
EXPOSE 80
CMD ["/usr/sbin/httpd","-D","FOREGROUND"]


docker build -t img:v1 .   ---> building a image from docker file in PWD where the Dockerfile is present

docker images ---> check the tag images img:v1

docker run -itd --name:web1 --rm -p 80:80 img:v1  --> run the container 

docker ps --> check the container is present without any issues 

browse the IP to check the application is working on it
